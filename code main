#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <string>

using namespace std;

class Job {
public:
    int jobID;
    string jobName;
    string status; // Status of the jog pending processing and completed 

    Job(int id, string name) : jobID(id), jobName(name), status("Pending") {}
};

class JobScheduler {
private:
    queue<Job> jobQueue;    // Queue for incoming jobs
    stack<Job> completedJobs; // Stack for completed jobs
    
    
    
    vector<Job> allJobs;    // Vector to store all jobs for status tracking

public:
    void addJob(int id, const string& name) {
        Job newJob(id, name);
        jobQueue.push(newJob);
        allJobs.push_back(newJob);
        cout << "Job added: " << name << " (ID: " << id << ")\n";
    }

    void processJobs() {
        if (jobQueue.empty()) {
            cout << "No jobs to process.\n";
            return;
        }

        while (!jobQueue.empty()) {
            Job currentJob = jobQueue.front();
            jobQueue.pop();
            cout << "Processing job: " << currentJob.jobName << " (ID: " << currentJob.jobID << ")\n";

            // Update status to Processing
            for (size_t i = 0; i < allJobs.size(); ++i) {
                if (allJobs[i].jobID == currentJob.jobID) {
                    allJobs[i].status = "Processing";
                    break;
                }
            }

            // Simulate job completion
            currentJob.status = "Completed";
            completedJobs.push(currentJob);

            // Update status to Completed in allJobs
            for (size_t i = 0; i < allJobs.size(); ++i) {
                if (allJobs[i].jobID == currentJob.jobID) {
                    allJobs[i].status = "Completed";
                    break;
                }
            }
        }
    }

    void displayCompletedJobs() {
        if (completedJobs.empty()) {
            cout << "No completed jobs.\n";
            return;
        }

        cout << "Completed Jobs:\n";
        stack<Job> tempStack = completedJobs; // Copy stack for display

        while (!tempStack.empty()) {
            Job job = tempStack.top();
            cout << "Job Name: " << job.jobName << " (ID: " << job.jobID << ")\n";
            tempStack.pop();
        }
    }

    void displayPendingJobs() {
        cout << "Pending Jobs:\n";
        for (size_t i = 0; i < allJobs.size(); ++i) {
            if (allJobs[i].status == "Pending") {
                cout << "Job Name: " << allJobs[i].jobName 
                     << " (ID: " << allJobs[i].jobID << ")\n";
            }
        }
    }

    void displayAllJobs() {
        if (allJobs.empty()) {
            cout << "No jobs in the system.\n";
            return;
        }

        cout << "All Jobs:\n";
        for (size_t i = 0; i < allJobs.size(); ++i) {
            cout << "Job Name: " << allJobs[i].jobName 
                 << " (ID: " << allJobs[i].jobID 
                 << ", Status: " << allJobs[i].status << ")\n";
        }
    }
};

int main() {
    JobScheduler scheduler;
    int choice, id;
    string name;

    do {
        cout << "\nJob Scheduling System\n";
        cout << "1. Add Job\n";
        cout << "2. Process Jobs\n";
        cout << "3. Display Completed Jobs\n";
        cout << "4. Display Pending Jobs\n";
        cout << "5. Display All Jobs\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter Job ID: ";
                cin >> id;
                cout << "Enter Job Name: ";
                cin.ignore(); // Clear the input buffer
                getline(cin, name);
                scheduler.addJob(id, name);
                break;
            case 2:
                scheduler.processJobs();
                break;
            case 3:
                scheduler.displayCompletedJobs();
                break;
            case 4:
                scheduler.displayPendingJobs();
                break;
            case 5:
                scheduler.displayAllJobs();
                break;
            case 6:
                cout << "Exiting the system. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}
